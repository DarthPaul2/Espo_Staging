// client/custom/src/views/c-auftrag/record/detail.js
console.log('[LOAD] custom:views/c-auftrag/record/detail');

define('custom:views/c-auftrag/record/detail', ['views/record/detail'], function (Dep) {

    const LOG = (t, p) => { try { console.log('[CAuftrag/detail]', t, p || ''); } catch (e) { } };

    // --- –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é
    window.__CAUF_RELOADING__ = false;
    window.__CAUF_RELOAD_ARMED__ = false;

    return Dep.extend({

        FLASK_BASE: 'https://klesec.pagekite.me/api',
        BASIC_AUTH: 'Basic ' + btoa('admin:test123'),

        setup: function () {
            Dep.prototype.setup.call(this);
            LOG('Dep.prototype.setup.call(this) ausgef√ºhrt');

            // ===== DOM-watcher –¥–ª—è –ø–∞–Ω–µ–ª–∏ "Angebots" —Å ¬´arm‚Üífire¬ª =====
            (function installAngebotsWatcher(self) {
                if (self.__angebotsWatcherInstalled) return;
                self.__angebotsWatcherInstalled = true;

                const SEL_PANEL = '[data-name="angebots"], [data-link="angebots"], .panel[data-name="angebots"], .panel[data-link="angebots"]';

                const findPanelEl = () => {
                    const root = self.$el && self.$el.get && self.$el.get(0);
                    if (!root) return null;
                    return root.querySelector(SEL_PANEL);
                };

                const findListTarget = (panelEl) =>
                    panelEl.querySelector('.list-container') ||
                    panelEl.querySelector('.list') ||
                    panelEl.querySelector('table') ||
                    panelEl;

                const HARD_RELOAD_ONCE = (reason) => {
                    if (window.__CAUF_RELOADING__) return;
                    window.__CAUF_RELOADING__ = true;
                    console.log('[CAuftrag/detail] üîÅ HARD RELOAD (once) in 250 ms ‚Üí', reason);
                    setTimeout(() => {
                        try { window.location.reload(); }
                        catch (e) { window.location.href = window.location.href; }
                    }, 250);
                };

                function installObserver(panelEl) {
                    const target = findListTarget(panelEl);
                    if (!target) {
                        console.warn('[CAuftrag/detail] ‚ö†Ô∏è Angebots target not found inside panel');
                        return;
                    }

                    // ¬´–∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª ‚Äî –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–∞–º/—ç–∫—à–µ–Ω–∞–º –ø–∞–Ω–µ–ª–∏
                    const armIfActionClick = (ev) => {
                        const a = ev.target.closest('[data-action], .action');
                        if (!a) return;
                        const act = (a.getAttribute('data-action') || a.getAttribute('action') || a.dataset?.action || '').toLowerCase();
                        // –≤—Å—ë, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ relate/unrelate/select/create
                        if (/(link|relate|unlink|unrelate|selectrelated|createrelated)/i.test(act)) {
                            window.__CAUF_RELOAD_ARMED__ = true;
                            console.log('[CAuftrag/detail] üü° ARMED by click:', act);
                        }
                    };
                    panelEl.addEventListener('click', armIfActionClick, true);

                    // –ø–æ—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º .no-data)
                    const rowCount = () => {
                        const tb = target.querySelector('tbody');
                        const base = tb || target;
                        return [...base.querySelectorAll('tr')].filter(tr => !tr.classList.contains('no-data')).length;
                    };

                    let last = rowCount();
                    console.log('[CAuftrag/detail] üëÄ Beobachte Angebots-Panel; rows(init)=', last);

                    // –Ω–∞–±–ª—é–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
                    const obs = new MutationObserver(() => {
                        if (window.__CAUF_RELOADING__) return;             // —É–∂–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
                        if (!window.__CAUF_RELOAD_ARMED__) return;         // –Ω–µ ¬´–≤–æ–æ—Ä—É–∂–µ–Ω—ã¬ª ‚Äî –∏–≥–Ω–æ—Ä–∏–º –ø–µ—Ä–≤–∏—á–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É

                        const cur = rowCount();
                        if (cur !== last) {
                            console.log('[CAuftrag/detail] üîî Angebots rows changed:', { from: last, to: cur });
                            last = cur;
                            // —Ä–∞–∑–≥—Ä—É–∂–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏ –∂—ë—Å—Ç–∫–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–¥–∏–Ω —Ä–∞–∑
                            try { obs.disconnect(); } catch (e) { }
                            panelEl.removeEventListener('click', armIfActionClick, true);
                            HARD_RELOAD_ONCE('angebots rows changed after armed');
                        }
                    });

                    obs.observe(target, { childList: true, subtree: true });

                    // —É–±–æ—Ä–∫–∞
                    self.once('remove', () => {
                        try { obs.disconnect(); } catch (e) { }
                        panelEl.removeEventListener('click', armIfActionClick, true);
                    });
                }

                // –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è DOM –ø–∞–Ω–µ–ª–∏
                let tries = 0, maxTries = 60;
                const timer = setInterval(() => {
                    const el = findPanelEl();
                    if (el) {
                        clearInterval(timer);
                        console.log('[CAuftrag/detail] ‚úÖ Angebots-Panel DOM gefunden');
                        installObserver(el);
                    } else if (++tries >= maxTries) {
                        clearInterval(timer);
                        console.warn('[CAuftrag/detail] ‚ùå Angebots-Panel DOM nicht gefunden (timeout)');
                    }
                }, 100);
            })(this);

            // ---------- –∫–Ω–æ–ø–∫–∏ ----------
            this.buttonList = this.buttonList || [];
            this.buttonList = this.buttonList.filter(b => b.name !== 'pdfSave');
            this.buttonList.push(
                { name: 'recalc', label: 'Summen aktualisieren', style: 'default', action: 'recalc' },
                { name: 'pdfSave', label: 'Auftragsbest√§tigung erzeugen', style: 'primary', action: 'pdfSave' },
                { name: 'sendConfirmation', label: 'Auftragsbest√§tigung senden', style: 'default', action: 'sendConfirmation' }
            );
            LOG('buttons:init', this.buttonList);

            // ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
            const bump = () => {
                const f = n => this.getFieldView && this.getFieldView(n);
                ['betragNetto', 'betragBrutto', 'verrechnetNetto', 'verrechnetBrutto'].forEach(name => {
                    const fv = f(name);
                    if (fv && fv.setValue) {
                        fv.setValue(this.model.get(name) || 0, { render: true, fromModel: true });
                    }
                });
            };

            const hardRefresh = () => {
                this.model.fetch({
                    success: () => { this.reRender(); setTimeout(bump, 0); },
                    error: (xhr) => LOG('hardRefresh:error', { status: xhr?.status })
                });
            };

            const recalcOnServer = () => {
                const id = this.model.id;
                if (!id) return;
                $.ajax({
                    url: `${this.FLASK_BASE}/auftrag/${encodeURIComponent(id)}/recalc_totals`,
                    method: 'POST',
                    success: () => { hardRefresh(); },
                    error: (xhr) => {
                        this.notify('Fehler beim Neuberechnen.', 'error');
                        LOG('recalc:error', { status: xhr?.status, text: xhr?.responseText });
                    }
                });
            };
            this._recalcOnServer = recalcOnServer;

            // –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
            this.once('after:render', () => { bump(); this._applyPdfLinkLabel(); }, this);

            // –ª—ë–≥–∫–∏–π –ø–µ—Ä–µ—Ä–∏—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—É–º–º
            this.listenTo(this.model, 'change:betragNetto change:betragBrutto change:verrechnetNetto change:verrechnetBrutto', () => {
                setTimeout(() => this.reRender(), 0);
            });

            // –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ PDF
            this.listenTo(this.model, 'change:pdfUrl', () => {
                setTimeout(() => this._applyPdfLinkLabel(), 0);
            });
        },

        // ======================== actions ========================
        actionRecalc: function () {
            const id = this.model.id;
            if (!id) return;
            const notifyId = this.notify('Wird aktualisiert‚Ä¶', 'loading');
            $.ajax({
                url: `${this.FLASK_BASE}/auftrag/${encodeURIComponent(id)}/recalc_totals`,
                method: 'POST',
                success: () => { this.notify(false, 'loading', notifyId); this.model.fetch({ success: () => this.reRender() }); },
                error: () => { this.notify(false, 'loading', notifyId); this.notify('Fehler beim Aktualisieren', 'error'); }
            });
        },

        actionPdfSave: function () {
            const espoId = this.model.id;
            if (!espoId) return;

            const notifyId = this.notify('PDF wird erzeugt und gespeichert‚Ä¶', 'loading');

            const payload = {
                id: this.model.id,
                titel: 'AUFTRAGSBEST√ÑTIGUNG',
                einleitung: `Sehr geehrte Damen und Herren,

wir bedanken uns f√ºr die Erteilung Ihres Auftrages und best√§tigen hiermit den Eingang sowie die Annahme.  
Nachfolgend erhalten Sie die Auftragsbest√§tigung mit den vereinbarten Leistungen und Konditionen.  

Sollten Sie R√ºckfragen oder √Ñnderungsw√ºnsche haben, steht Ihnen Ihr pers√∂nlicher Ansprechpartner jederzeit gerne zur Verf√ºgung:

Ihr Ansprechpartner: Tobias Schiller  
E-Mail: schiller@klesec.de  
Tel.: 0171 6969930  

Bitte richten Sie weitere Korrespondenz zu diesem Auftrag ebenfalls an: schiller@klesec.de  

Die Auftragsbest√§tigung umfasst die nachstehenden Positionen sowie die aufgef√ºhrten Hinweise.`,
                bemerkung: `Wir freuen uns, Ihren Auftrag ausf√ºhren zu d√ºrfen und sichern Ihnen eine fachgerechte und zuverl√§ssige Umsetzung zu.  
F√ºr R√ºckfragen oder weitere Abstimmungen stehen wir Ihnen selbstverst√§ndlich jederzeit gerne zur Verf√ºgung.  

Vielen Dank f√ºr Ihr Vertrauen ‚Äì auf eine erfolgreiche Zusammenarbeit!  

Ihr KleSec Team`,
                typ: 'auftrag'
            };

            const url = `${this.FLASK_BASE}/auftrag/${encodeURIComponent(espoId)}/save_pdf`;

            $.ajax({
                url,
                method: 'POST',
                contentType: 'application/json',
                headers: { 'Authorization': this.BASIC_AUTH },
                data: JSON.stringify(payload),
                success: (resp) => {
                    this.notify(false, 'loading', notifyId);
                    this.notify('PDF gespeichert.', 'success');
                    if (resp?.pdfUrl) {
                        this.model.save({ pdfUrl: resp.pdfUrl }, { success: () => this.reRender() });
                    }
                },
                error: (xhr) => {
                    this.notify(false, 'loading', notifyId);
                    this.notify('Fehler beim Speichern der PDF.', 'error');
                    LOG('pdfSave:error', { status: xhr?.status, text: xhr?.responseText });
                }
            });
        },

        // --- helpers: –≥–¥–µ –≤–∑—è—Ç—å —Ñ–∏—Ä–º—É —É –∑–∞–∫–∞–∑–∞ (account|firma|kunde) ---
        _getAccountRef: function () {
            const id = this.model.get('accountId') || this.model.get('firmaId') || this.model.get('kundeId');
            const name = this.model.get('accountName') || this.model.get('firmaName') || this.model.get('kundeName');
            if (!id) console.warn('[CAuftrag/detail] ‚ö†Ô∏è Keine Firmen-Referenz im Auftrag (accountId|firmaId|kundeId).');
            return { id, name, scope: 'Account' };
        },

        // --- helpers: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —à—Ç–∞—Ç–Ω—ã–π –∫–æ–º–ø–æ–∑–µ—Ä —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º ---
        _openEspoEmailCompose: function (attrs) {
            // attrs: {to, cc, bcc, subject, body, isHtml, parentType, parentId, parentName}
            const viewName = this.getMetadata().get(['clientDefs', 'Email', 'modalViews', 'compose']) || 'views/modals/compose-email';

            const attributes = {
                // –∞–¥—Ä–µ—Å–∞
                to: attrs.to || '',                 // —Å—Ç—Ä–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏, ; –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                cc: attrs.cc || '',
                bcc: attrs.bcc || '',

                // —Ç–µ–º–∞/–∏–º—è –ø–∏—Å—å–º–∞
                name: attrs.subject || '',
                subject: attrs.subject || '',

                // —Ç–µ–ª–æ
                body: attrs.body || '',
                isHtml: attrs.isHtml !== false,

                // —Å–≤—è–∑—å ¬´Bezieht sich auf¬ª
                parentType: attrs.parentType || null,
                parentId: attrs.parentId || null,
                parentName: attrs.parentName || null
            };

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —à—Ç–∞—Ç–Ω—ã–π –º–æ–¥–∞–ª, –ü–ï–†–ï–î–ê–Å–ú attributes (–ù–ï model!)
            this.createView('composeEmail', viewName, {
                attributes,
                focusForCreate: true
            }, view => {
                console.log('[CAuftrag/detail] ‚úâÔ∏è Compose ge√∂ffnet f√ºr:', attributes);
                view.render();
            });
        },


        // ======================== actions ========================
        actionSendConfirmation: function () {
            const pdfUrl = this.model.get('pdfUrl');
            if (!pdfUrl) {
                this.notify('Kein PDF vorhanden.', 'error');
                return;
            }

            const ref = this._getAccountRef();
            if (!ref.id) {
                this.notify('Kein verkn√ºpfter Kunde/Firma im Auftrag.', 'error');
                return;
            }

            this.notify('E-Mail-Entwurf wird vorbereitet‚Ä¶', 'loading');
            const notifyId = this.lastNotifyId;

            // === –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º Espo.Ajax –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–∞ ===
            Espo.Ajax.getRequest(`Account/${encodeURIComponent(ref.id)}`).then((acc) => {
                let toEmail = acc && (acc.emailAddress || acc.emailAddressPrimary || '');
                if (!toEmail && Array.isArray(acc?.emailAddressData)) {
                    const primary = acc.emailAddressData.find(e => e.primary) || acc.emailAddressData[0];
                    toEmail = primary ? primary.emailAddress : '';
                }

                if (!toEmail) {
                    this.notify(false, 'loading', notifyId);
                    this.notify('Beim Kunden ist keine E-Mail-Adresse hinterlegt.', 'error');
                    console.warn('[CAuftrag/detail] ‚ö†Ô∏è Kunde ohne E-Mail:', acc);
                }

                const subject = `Auftragsbest√§tigung f√ºr ${ref.name || 'Kunde'}`.trim();
                const bodyHtml =
                    `Sehr geehrte Damen und Herren,<br><br>` +
                    `anbei erhalten Sie die Auftragsbest√§tigung zu Ihrem Auftrag.<br>` +
                    `Die Best√§tigung k√∂nnen Sie hier einsehen: ` +
                    `<a href="${pdfUrl}" target="_blank" rel="noopener">${pdfUrl}</a><br><br>` +
                    `Mit freundlichen Gr√º√üen<br>` +
                    `Ihr KleSec Team`;

                this.notify(false, 'loading', notifyId);

                // –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–ø–æ–∑–µ—Ä
                this._openEspoEmailCompose({
                    to: toEmail || '',
                    subject,
                    body: bodyHtml,
                    isHtml: true,
                    parentType: ref.scope,
                    parentId: ref.id,
                    parentName: ref.name || ''
                });

            }).catch(err => {
                this.notify(false, 'loading', notifyId);
                this.notify('Kundendaten konnten nicht geladen werden.', 'error');
                console.error('[CAuftrag/detail] Fehler beim Laden der Firma:', err);
            });
        },

        // ======================== helpers ========================
        _applyPdfLinkLabel: function () {
            const url = this.model.get('pdfUrl');
            const $field = this.$el.find('[data-name="pdfUrl"]');
            if (!$field.length) return;

            const $value = $field.find('.value, .link-container').first().length
                ? $field.find('.value, .link-container').first()
                : $field;

            if (!url) { $value.text('Keine PDF gespeichert'); return; }

            const label = 'üìÑ Gespeicherte Auftragsbest√§tigung anzeigen';
            let $a = $value.find('a[href]');
            if ($a.length) {
                $a.attr({ href: url, target: '_blank', rel: 'noopener' }).text(label);
            } else {
                $value.empty().append(
                    $('<a>').attr({ href: url, target: '_blank', rel: 'noopener' }).text(label)
                );
            }
        }
    });
});
